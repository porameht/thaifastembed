name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      target:
        description: 'Publish target'
        required: true
        default: 'testpypi'
        type: choice
        options:
        - testpypi
        - pypi

jobs:
  publish:
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.target || 'pypi' }}
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run tests
      run: poetry run pytest tests/ -v

    - name: Build package
      run: poetry build

    - name: Publish to TestPyPI
      if: github.event.inputs.target == 'testpypi' || (github.event_name == 'workflow_dispatch' && github.event.inputs.target == 'testpypi')
      env:
        POETRY_PYPI_TOKEN_TESTPYPI: ${{ secrets.TESTPYPI_API_TOKEN }}
      run: |
        poetry config pypi-token.testpypi $POETRY_PYPI_TOKEN_TESTPYPI
        poetry publish --repository testpypi

    - name: Publish to PyPI
      if: github.event_name == 'release' || (github.event.inputs.target == 'pypi')
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        poetry config pypi-token.pypi $POETRY_PYPI_TOKEN_PYPI
        poetry publish
